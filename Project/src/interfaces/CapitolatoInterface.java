/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import java.awt.EventQueue;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Capitolato;
import models.Voce;

/**
 *
 * @author Pepito
 */
public class CapitolatoInterface extends javax.swing.JFrame {

    private DefaultTableModel clientiModel, subModel;
    private static Capitolato capitolato;
    private boolean saved;

    /**
     * Creates new form UserInterface
     */
    public CapitolatoInterface() {
        saved = true;
        clientiModel = initTableModel();
        subModel = initTableModel();
        initCapitolati();
        refreshTables();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

    }

    public CapitolatoInterface(Voce voceCliente, Voce voceSubappaltatore) {
        saved = false;
        clientiModel = initTableModel();
        subModel = initTableModel();
        //initCapitolati();
        try {
            capitolato.addVoceCliente(voceCliente);
            capitolato.addVoceSubappaltori(voceSubappaltatore);
        } catch(ClassCastException ex) {
            JOptionPane.showMessageDialog(this, "File del capitolato corrotto", "Avviso", JOptionPane.WARNING_MESSAGE);
        }
        refreshTables();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    private void refreshTables() {
        clientiModel.setRowCount(0);
        subModel.setRowCount(0);

        for (Voce voce : capitolato.getCapitolatoClienti()) {
            Object[] row = {voce.getCodice(), voce.getDescrizione(), voce.getUnitaDiMisura(), voce.getPrezzoUnitario()};
            clientiModel.addRow(row);
        }

        for (Voce voce : capitolato.getCapitolatoSubappaltatori()) {
            Object[] row = {voce.getCodice(), voce.getDescrizione(), voce.getUnitaDiMisura(), voce.getPrezzoUnitario()};
            subModel.addRow(row);
        }
        
        System.out.print("Ci sono " + clientiModel.getRowCount() + " voci nella tabella e ");
        System.out.println(capitolato.getCapitolatoClienti().size() + " nel file.");
    }

    private void initCapitolati() {
        try {
            capitolato = Capitolato.caricaCapitolato();
            return;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "File non trovato o corrotto", "Avviso", JOptionPane.WARNING_MESSAGE);
            capitolato = new Capitolato();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            capitolato.salvaCapitolato();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }

    private DefaultTableModel initTableModel() {
        DefaultTableModel tm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case 3:
                        return Double.class;
                    default:
                        return String.class;
                }
            }
        };
        tm.addColumn("Codice");
        tm.addColumn("Descrizione");
        tm.addColumn("Unit√† di misura");
        tm.addColumn("Prezzo unitario");

        return tm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        capitolatoPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientiTable = new javax.swing.JTable();
        clientiTable.setDefaultRenderer(String.class, new MultiLineTableCellRenderer());
        jPanel1 = new javax.swing.JPanel();
        addVoceButton = new javax.swing.JButton();
        deleteVoceButton = new javax.swing.JButton();
        salvaCapitolatoButton = new javax.swing.JButton();
        progettoButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        subTable = new javax.swing.JTable();
        subTable.setDefaultRenderer(String.class, new MultiLineTableCellRenderer());

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("House Hub");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        capitolatoPanel.setBackground(new java.awt.Color(149, 165, 166));
        capitolatoPanel.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("CAPITOLATO CLIENTI");
        jLabel5.setMaximumSize(new java.awt.Dimension(100, 17));
        capitolatoPanel.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        clientiTable.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        clientiTable.setModel(clientiModel);
        clientiTable.setShowHorizontalLines(true);
        clientiTable.setShowVerticalLines(true);
        clientiTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientiTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(clientiTable);

        capitolatoPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(149, 165, 166));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        addVoceButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        addVoceButton.setText("Aggiungi nuova voce");
        addVoceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVoceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(addVoceButton, gridBagConstraints);

        deleteVoceButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        deleteVoceButton.setText("Elimina voce");
        deleteVoceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVoceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(deleteVoceButton, gridBagConstraints);

        salvaCapitolatoButton.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        salvaCapitolatoButton.setText("Salva");
        salvaCapitolatoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaCapitolatoButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(salvaCapitolatoButton, gridBagConstraints);

        progettoButton.setFont(new java.awt.Font("Comic Sans MS", 0, 13)); // NOI18N
        progettoButton.setText("Progetti");
        progettoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                progettoButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(progettoButton, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(149, 165, 166));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("CAPITOLATO SUB-APPALTATORI");
        jLabel6.setPreferredSize(new java.awt.Dimension(150, 17));
        jPanel2.add(jLabel6, java.awt.BorderLayout.PAGE_START);

        subTable.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        subTable.setModel(subModel);
        subTable.setShowHorizontalLines(true
        );
        subTable.setShowVerticalLines(true);
        subTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(subTable);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(capitolatoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addComponent(capitolatoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salvaCapitolatoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaCapitolatoButtonActionPerformed
        salva();
    }//GEN-LAST:event_salvaCapitolatoButtonActionPerformed

    private void salva() {
        try {
            capitolato.salvaCapitolato();
            saved = true;
            capitolato = Capitolato.caricaCapitolato();
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteVoceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVoceButtonActionPerformed
        //Bisogna prima aver selezionato la voce
        String selectedCodice;
        int selectedRow = clientiTable.getSelectedRow();
        if (selectedRow == -1) {
            selectedRow = subTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Nessuna voce selezionata", "Avviso", JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                //Seleziona da subTable
                selectedCodice = (String) subModel.getValueAt(selectedRow, 0);
            }
        } else {
            //Seleziona da clientiTable
            selectedCodice = (String) clientiModel.getValueAt(selectedRow, 0);
        }
        
        int choice = JOptionPane.showConfirmDialog(this, 
                "Sei sicuro di voler eliminare la voce "+selectedCodice+" da entrambi i capitolati?");
        if(choice == JOptionPane.NO_OPTION || choice == JOptionPane.CANCEL_OPTION)
            return;

        capitolato.removeVoceCliente(selectedCodice);
        capitolato.removeVoceSubappaltatori(selectedCodice);
        saved = false;
        refreshTables();
    }//GEN-LAST:event_deleteVoceButtonActionPerformed

    private void addVoceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVoceButtonActionPerformed
        //Nuova interfaccia per inserire la nuova voce
        saved = false;
        EventQueue.invokeLater(() -> {
            new NuovaVoceInCapitolatoInterface().setVisible(true);
            dispose();
        });

        //Recupera il controllo e visualizza le voci
    }//GEN-LAST:event_addVoceButtonActionPerformed

    private void progettoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_progettoButtonActionPerformed
        if (saved == false) {
            int choice = JOptionPane.showConfirmDialog(this, "Vuoi salvare prima di passare ai progetti?");
            if (choice == JOptionPane.YES_OPTION) {
                salva();
            } else if (choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        EventQueue.invokeLater(() -> {
            new ProgettoInterface(false).setVisible(true);
            dispose();
        });
    }//GEN-LAST:event_progettoButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (saved == false) {
            int choice = JOptionPane.showConfirmDialog(this, "Vuoi salvare prima di chiudere?");
            if (choice == JOptionPane.YES_OPTION) {
                salva();
            } else if (choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        EventQueue.invokeLater(() -> {
            new ProgettoInterface(false).setVisible(true);
            dispose();
        });
    }//GEN-LAST:event_formWindowClosing

    private void clientiTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientiTableMouseClicked
        subTable.clearSelection();

        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            gestisciVoce(true);
        }
    }//GEN-LAST:event_clientiTableMouseClicked

    private void subTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subTableMouseClicked
        clientiTable.clearSelection();

        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            gestisciVoce(false);
        }
    }//GEN-LAST:event_subTableMouseClicked

    private void gestisciVoce(boolean cliente) {
        int selectedRow;
        int selectedCol;

        if (cliente) {
            selectedRow = clientiTable.getSelectedRow();

        } else {
            selectedRow = subTable.getSelectedRow();
        }

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleziona una voce del capitolato", "Avviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (cliente) {
            selectedCol = clientiTable.getSelectedColumn();

        } else {
            selectedCol = subTable.getSelectedColumn();
        }
        
        switch(selectedCol) {
            case 3:
                gestisciPrezzo(selectedRow, cliente);
                break;
            case 1:
                gestisciDescrizione(selectedRow, cliente);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Seleziona descrizione o prezzo", "Avviso", JOptionPane.WARNING_MESSAGE);
                break;
        }
    }
    
    private void gestisciDescrizione(int selectedRow, boolean cliente) {
        String descrizione, nuovaDescrizione;
        
        if (cliente) {
            descrizione = (String) clientiTable.getValueAt(selectedRow, 1);
        } else {
            descrizione = (String) subTable.getValueAt(selectedRow, 1);
        }
        
        try {

            if (cliente) {
                nuovaDescrizione = (String) JOptionPane.showInputDialog(this, "Scegli nuova descrizione per clienti",
                        "Descrizione", JOptionPane.QUESTION_MESSAGE, null, null, descrizione);

            } else {
                nuovaDescrizione = (String) JOptionPane.showInputDialog(this, "Scegli nuova descrizione per sub-appaltatori",
                        "Descrizione", JOptionPane.QUESTION_MESSAGE, null, null, descrizione);
            }

        } catch (NullPointerException e){
            return;
        }
        
        Voce v;
        if (cliente) {
            v = capitolato.removeVoceCliente((String) clientiTable.getValueAt(selectedRow, 0));
            v.setDescrizione(nuovaDescrizione);
            capitolato.addVoceCliente(v);
        } else {
            v = capitolato.removeVoceSubappaltatori((String) subTable.getValueAt(selectedRow, 0));
            v.setDescrizione(nuovaDescrizione);
            capitolato.addVoceSubappaltori(v);
        }

        saved = false;
        refreshTables();
    }
    
    private void gestisciPrezzo(int selectedRow, boolean cliente) {
        double prezzo;

        if (cliente) {
            prezzo = (double) clientiTable.getValueAt(selectedRow, 3);
        } else {
            prezzo = (double) subTable.getValueAt(selectedRow, 3);
        }

        Double nuovoPrezzo;
        try {

            if (cliente) {
                nuovoPrezzo = new Double((String) JOptionPane.showInputDialog(this, "Scegli nuovo prezzo per clienti",
                        "Prezzo unitario", JOptionPane.QUESTION_MESSAGE, null, null, prezzo));

            } else {
                nuovoPrezzo = new Double((String) JOptionPane.showInputDialog(this, "Scegli nuovo prezzo per sub-appaltatori",
                        "Prezzo unitario", JOptionPane.QUESTION_MESSAGE, null, null, prezzo));
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Il prezzo non √® corretto", "Avviso", JOptionPane.WARNING_MESSAGE);
            return;
        } catch (NullPointerException e){
            return;
        }
        
        Voce v;
        if (cliente) {
            v = capitolato.removeVoceCliente((String) clientiTable.getValueAt(selectedRow, 0));
            v.setPrezzoUnitario(nuovoPrezzo);
            capitolato.addVoceCliente(v);
        } else {
            v = capitolato.removeVoceSubappaltatori((String) subTable.getValueAt(selectedRow, 0));
            v.setPrezzoUnitario(nuovoPrezzo);
            capitolato.addVoceSubappaltori(v);
        }

        saved = false;
        refreshTables();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapitolatoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapitolatoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapitolatoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapitolatoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CapitolatoInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVoceButton;
    private javax.swing.JPanel capitolatoPanel;
    private javax.swing.JTable clientiTable;
    private javax.swing.JButton deleteVoceButton;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton progettoButton;
    private javax.swing.JButton salvaCapitolatoButton;
    private javax.swing.JTable subTable;
    // End of variables declaration//GEN-END:variables
}
